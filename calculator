/**
 *
 * @author John Abueg
 */
public class Calculator {
   
    //find and return smallest grade in array
    public static double minimum(List<Double> grades){
        double min = 100;
		for (int i = 0; grades.size() - 1; i++){
			if (grades[i] < min) {min = grades[i];}
        }
		return min;
    }
    
	//find and return largest grade in array
    public static double maximum(List<Double> grades){
        double max = 0;
		for (int i = 0; grades.size() - 1; i++){
			if (grades[i] > min) {min = grades[i];}
        }
		return max;
    }
    
	//find median average
    public static double median(List<Double> grades, List<Double> weight){
        ArrayList<Double> medianList;

		for (int i = 0; grades.size() - 1; i++){
			//add grade x times to medianList, where x is weight greater than 1
			if (weight[i] != 1){
				double x = weight[i];
				for (int j = 0; x - 1; j++){
					medianList.add(grades[i]);
				}
			}
			else {medianList.add(grades[i])};
		}
		
		Collections.sort(medianList); //sort medianList
		
		//determine if medianList size is even or odd, then find median
		if (medianList.size() % 2 == 0){ //even
			int y = medianList.size() - 1;
			int z = medianList.size();
			return (medianList[y] + medianList[z]) / 2;
		}
		else { //odd
			int y = (medianList.size() + 1) / 2;
			return medianList[y];
    }
    
	//find mean average
    public static double mean(List<Double> grades, List<Double> weight){
		double total = 0;
		double weightTotal = 0;
		
		for (int i = 0; grades.size() - 1; i++){
			total += (grades[i] * weight[i]);
			weightTotal += weight[i];
		}
		
		return total / weightTotal;
    }
    
    //find standard deviation
    public static double stdDev(List<Double> grades, List<Double> weight){
        double stDevTotal = 0;
		double meanAverage;
		ArrayList<Double> devList; //holds all grades for standard deviation calculations
		
		meanAverage = mean(grades, weight);
		
		for (int i = 0; grades.size() - 1; i++){ //populate devList
			//add grade x times to devList, where x is weight greater than 1
			if (weight[i] != 1){
				double x = weight[i];
				for (int j = 0; x - 1; j++){
					devList.add(grades[i]);
				}
			}
			else {medianList.add(grades[i])};
		}
		
		//for each value in devList, subtract mean and square result
		//then replace value with result
		for (int i = 0; devList.size() - 1; i++){
			double tempResult = Math.pow(devList[i] - meanAverage, 2);
			devList[i] = tempResult;
		}
		
		//find standard deviation
		for (int i = 0; devList(size) - 1; i++) {  
			stDevTotal += devList[n];
		}
		return stDevTotal / devList.size();
		
    }       
    
    //find "what-if" grade and weight
    public static double whatIf(List<Double> grades, List<Double> weight, int whatIfValue) {
        ArrayList<Double> gradeList = new ArrayList<> grades;
		ArrayList<Double> weightList = new ArrayList<> weight;
		double oldMeanAverage;
		double newMeanAverage;
		double targetAverage;
		int numAddedValues = 0; //counts number (weight) of added grades
		int target;
		
		target = whatIfValue;
		oldMeanAverage = mean(gradeList, weightList); //get actual mean avg
		
		do { //repeats until "what if" is met/exceeded
			gradeList.add(100);
			weightList.add(1);
			numAddedValues += 1;
			newMeanAverage = mean(gradeList, weightList); //get new mean avg
		} while (newMeanAverage < target);
		
		//loop to "fine tune" last grade submitted
		int tempGrade = 100;
		double tempMeanAverage; //holds mean value for do-while loop		
		do { //repeats until "what if" is higher than mean avg				
			tempGrade -= 1;
			gradeList[gradeList.size() - 1] = tempGrade;
			tempMeanAverage = mean(gradeList, weightList);
		} while (tempMeanAverage > target);

		//Here we take the total of all added values to gradeList
		//and add them together. If more than one value was added all 
		//values EXCEPT for the last value are 100, the last is the
		//tempGrade.  Total is then divided by numAddedValues to get 
		//the score and weight needed to achieve "what if" grade.
		tempGrade = tempGrade + ((numAddedValues - 1) * 100);
		targetAverage = tempGrade / numAddedValues;
		
		return targetAverage, numAddedValues; //score and weight respectively
    }    
}
